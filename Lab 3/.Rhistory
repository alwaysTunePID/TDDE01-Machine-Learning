get_points = function(stationName, date, times, monthDay) {
point = matrix(NA, nrow = length(times), ncol = 5)
point[,1] = rep(stations[stations$station_name == stationName,]$latitude,
times = length(times))
point[,2] = rep(stations[stations$station_name == stationName,]$longitude,
times = length(times))
point[,3] = rep(factor(date,
levels = levels(st$date)),
times = length(times))
point[,4] = factor(times,
levels = levels(temps$time))
point[,5] = factor(monthDay,
levels = levels(temps$MonthDay))
colnames(point) = c(colnames(featuresToUse)[1:4],colnames(featuresToUse)[6])
return(point)
}
pred_point_sum_kernel = function(pointToPred, data) {
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernSum = as.matrix(gaussianKernel(x1 = rep(pointToPred[4], times = nrow(data)),
x2 = data[,4], h = h_time) +
gaussianDistKernel(dist = distances,
h = h_distance) +
gaussianKernel(rep(pointToPred[3],
times = nrow(data)),
x2 = data[,3],
h = h_date))
above = (t(kernSum)%*%temps_data)[1,1]
below = sum(kernSum)
return(above/below)
}
pred_point_prod_kernel = function(pointToPred, data) {
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernProd = as.matrix(gaussianKernel(x1 = rep(pointToPred[4], times = nrow(data)),
x2 = data[,4],
h = h_time) *
gaussianDistKernel(dist = distances,
h = h_distance) *
gaussianKernel(rep(pointToPred[3], times = nrow(data)),
x2 = data[,3],
h = h_date))
above = (t(kernProd)%*%temps_data)[1,1]
below = sum(kernProd)
return(above/below)
}
par(mfrow=c(2,2))
distSeq = seq(-400000, 400000, 40)
plot(x=distSeq, gaussianDistKernel(dist = distSeq, h = h_distance), type = "l", lwd = 3, xlab = "Distance", ylab = "Gaussian distance kernel value", main = "Sensibility distance kernel")
# Show for time
timeSeq = seq(1,170,1)
plot(x=timeSeq, y = gaussianKernel(x1 = 40, x2 = timeSeq, h = h_time),
type = "l",
lwd = 3,
xlab = "Time",
ylab = "Gaussian kernel value",
main = "Sensibility time kernel for t = 05:25:00")
dateSeq = seq(1,19049,1)
plot(x=dateSeq,
y = gaussianKernel(x1 = 4000, x2 = dateSeq, h = h_date),
type = "l", lwd = 3,
xlab = "Date",
ylab = "Gaussian kernel value",
main = "Sensibility date kernel for date = 1970-02-05")
dateSeq = seq(1,366,1)
plot(x=dateSeq,
y = seasonalKernel(day1 = 10, day2 = dateSeq, h = h_season),
type = "l", lwd = 3, xlab = "Date of year",
ylab = "Gaussian kernel value",
main = "Sensibility date kernel for date = day 10")
par(mfrow=c(1,1))
par(mfrow=c(2,2))
distSeq = seq(-400000, 400000, 40)
plot(x=distSeq, gaussianDistKernel(dist = distSeq, h = h_distance), type = "l", lwd = 3, xlab = "Distance", ylab = "Gaussian distance kernel value", main = "Sensibility distance kernel")
# Show for time
timeSeq = seq(1,170,1)
plot(x=timeSeq, y = gaussianKernel(x1 = 40, x2 = timeSeq, h = h_time),
type = "l",
lwd = 3,
xlab = "Time",
ylab = "Gaussian kernel value",
main = "Sensibility time kernel for t = 05:25:00")
dateSeq = seq(1,19049,1)
plot(x=dateSeq,
y = gaussianKernel(x1 = 4000, x2 = dateSeq, h = h_date),
type = "l", lwd = 3,
xlab = "Date",
ylab = "Gaussian kernel value",
main = "Sensibility date kernel for date = 1970-02-05")
dateSeq = seq(1,366,1)
plot(x=dateSeq,
y = seasonalKernel(day1 = 10, day2 = dateSeq, h = h_season),
type = "l", lwd = 3, xlab = "Date of year",
ylab = "Gaussian kernel value",
main = "Sensibility date kernel for date = day 10")
par(mfrow=c(1,1))
# plot(trva)
# plot(tr)
# plot(va)
w_j <- runif(10, -1, 1)
b_j <- runif(10, -1, 1)
w_k <- runif(10, -1, 1)
b_k <- runif(1, -1, 1)
l_rate <- 1/nrow(tr)ˆ2
n_ite = 5000
error <- rep(0, n_ite)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# plot(trva)
# plot(tr)
# plot(va)
w_j <- runif(10, -1, 1)
b_j <- runif(10, -1, 1)
w_k <- runif(10, -1, 1)
b_k <- runif(1, -1, 1)
l_rate <- 1/nrow(tr)ˆ2
n_ite = 5000
error <- rep(0, n_ite)
error_va <- rep(0, n_ite)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# plot(trva)
# plot(tr)
# plot(va)
w_j <- runif(10, -1, 1)
b_j <- runif(10, -1, 1)
w_k <- runif(10, -1, 1)
b_k <- runif(1, -1, 1)
l_rate <- 1/nrow(tr)ˆ2
n_ite = 5000
error <- rep(0, n_ite)
error_va <- rep(0, n_ite)
for(i in 1:n_ite) {
# error computation: Your code here
cat("i: ", i, ", error: ", error[i]/2, ", error_va: ", error_va[i]/2, "\n")
flush.console()
for(n in 1:nrow(tr)) {
# forward propagation: Your code here
# backward propagation: Your code here
}
}
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# plot(trva)
# plot(tr)
# plot(va)
w_j <- runif(10, -1, 1)
b_j <- runif(10, -1, 1)
w_k <- runif(10, -1, 1)
b_k <- runif(1, -1, 1)
l_rate <- 1/nrow(tr)ˆ2
n_ite = 5000
error <- rep(0, n_ite)
error_va <- rep(0, n_ite)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# plot(trva)
# plot(tr)
# plot(va)
w_j <- runif(10, -1, 1)
b_j <- runif(10, -1, 1)
w_k <- runif(10, -1, 1)
b_k <- runif(1, -1, 1)
l_rate <- 1/nrow(tr)^2
n_ite = 5000
error <- rep(0, n_ite)
error_va <- rep(0, n_ite)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# plot(trva)
# plot(tr)
# plot(va)
w_j <- runif(10, -1, 1)
b_j <- runif(10, -1, 1)
w_k <- runif(10, -1, 1)
b_k <- runif(1, -1, 1)
l_rate <- 1/nrow(tr)^2
n_ite = 5000
error <- rep(0, n_ite)
error_va <- rep(0, n_ite)
help(tanh)
setwd("~/Desktop/Plugg_Lkpg/HT18/TDDE01/Lab 3")
h_distance <- 100000 # reasonable that it is the same within 200km more or less? No, say 100
h_date <- 180 # If the year was extra cold. Reasonable to have within a time frame of one year.
h_time <- 4 # About an hour ish. Reasonable.
set.seed(1234567890)
#install.packages("geosphere")
library(geosphere)
stations <- read.csv("stations.csv",
stringsAsFactors=FALSE,
fileEncoding="latin1")
temps <- read.csv("temps50k.csv")
# Creating Month and Day of year.
temps$MonthDay = factor(substr(as.character(temps$date),
start = 6,
stop = 10))
st <- merge(stations,temps,by="station_number")
date <- "2013-11-04" # The date to predict (up to the students)
times <- c("04:00:00", "06:00:00", "08:00:00", "10:00:00",
"12:00:00", "14:00:00", "16:00:00", "18:00:00",
"20:00:00", "22:00:00", "00:00:00")
temp <- vector(length=length(times))
monthDay = "11-04"
# My own code
# Can take in a vector aswell. Good.
gaussianKernel = function(x1,x2, h) {
u = (x1 - x2)/h
return(exp(-(u^2)))
}
gaussianDistKernel = function(dist, h) {
return(exp(-(dist^2)/(h^2)))
}
sumKernel = function(dist1, dist2, date1, date2, time1, time2) {
return(gaussianDistKernel(dist1, dist2, h_distance) +
gaussianKernel(date1, date2, h_date) +
gaussianKernel(time1, time2, h_time))
}
prodKernel = function(dist1, dist2, date1, date2, time1, time2) {
return(gaussianDistKernel(dist1, dist2, h_distance) *
gaussianKernel(date1, date2, h_date) *
gaussianKernel(time1, time2, h_time))
}
# Preprocess data to use
featuresToUse = data.matrix(st[,-c(1,2,3,6,7)])
featuresToUse = featuresToUse[,-c(3,7)]
featuresToUse[,1] = as.numeric(featuresToUse[,1])
featuresToUse[,2] = as.numeric(featuresToUse[,2])
# For sensitivity; show distance between
#Norrkoping and linkoping and different hours and different days
get_points = function(stationName, date, times, monthDay) {
point = matrix(NA, nrow = length(times), ncol = 5)
point[,1] = rep(stations[stations$station_name == stationName,]$latitude,
times = length(times))
point[,2] = rep(stations[stations$station_name == stationName,]$longitude,
times = length(times))
point[,3] = rep(factor(date,
levels = levels(st$date)),
times = length(times))
point[,4] = factor(times,
levels = levels(temps$time))
point[,5] = factor(monthDay,
levels = levels(temps$MonthDay))
colnames(point) = c(colnames(featuresToUse)[1:4],colnames(featuresToUse)[6])
return(point)
}
pred_point_sum_kernel = function(pointToPred, data) {
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernSum = as.matrix(gaussianKernel(x1 = rep(pointToPred[4], times = nrow(data)),
x2 = data[,4], h = h_time) +
gaussianDistKernel(dist = distances,
h = h_distance) +
gaussianKernel(rep(pointToPred[3],
times = nrow(data)),
x2 = data[,3],
h = h_date))
above = (t(kernSum)%*%temps_data)[1,1]
below = sum(kernSum)
return(above/below)
}
pred_point_prod_kernel = function(pointToPred, data) {
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernProd = as.matrix(gaussianKernel(x1 = rep(pointToPred[4], times = nrow(data)),
x2 = data[,4],
h = h_time) *
gaussianDistKernel(dist = distances,
h = h_distance) *
gaussianKernel(rep(pointToPred[3], times = nrow(data)),
x2 = data[,3],
h = h_date))
above = (t(kernProd)%*%temps_data)[1,1]
below = sum(kernProd)
return(above/below)
}
set.seed(1234567890)
#install.packages("geosphere")
library(geosphere)
stations <- read.csv("stations.csv",
stringsAsFactors=FALSE,
fileEncoding="latin1")
temps <- read.csv("temps50k.csv")
# Creating Month and Day of year.
temps$MonthDay = factor(substr(as.character(temps$date),
start = 6,
stop = 10))
st <- merge(stations,temps,by="station_number")
date <- "2013-11-04" # The date to predict (up to the students)
times <- c("04:00:00", "06:00:00", "08:00:00", "10:00:00",
"12:00:00", "14:00:00", "16:00:00", "18:00:00",
"20:00:00", "22:00:00", "00:00:00")
temp <- vector(length=length(times))
monthDay = "11-04"
# My own code
# Can take in a vector aswell. Good.
gaussianKernel = function(x1,x2, h) {
u = (x1 - x2)/h
return(exp(-(u^2)))
}
gaussianDistKernel = function(dist, h) {
return(exp(-(dist^2)/(h^2)))
}
sumKernel = function(dist1, dist2, date1, date2, time1, time2) {
return(gaussianDistKernel(dist1, dist2, h_distance) +
gaussianKernel(date1, date2, h_date) +
gaussianKernel(time1, time2, h_time))
}
prodKernel = function(dist1, dist2, date1, date2, time1, time2) {
return(gaussianDistKernel(dist1, dist2, h_distance) *
gaussianKernel(date1, date2, h_date) *
gaussianKernel(time1, time2, h_time))
}
# Preprocess data to use
featuresToUse = data.matrix(st[,-c(1,2,3,6,7)])
featuresToUse = featuresToUse[,-c(3,7)]
featuresToUse[,1] = as.numeric(featuresToUse[,1])
featuresToUse[,2] = as.numeric(featuresToUse[,2])
# For sensitivity; show distance between
#Norrkoping and linkoping and different hours and different days
get_points = function(stationName, date, times, monthDay) {
point = matrix(NA, nrow = length(times), ncol = 5)
point[,1] = rep(stations[stations$station_name == stationName,]$latitude,
times = length(times))
point[,2] = rep(stations[stations$station_name == stationName,]$longitude,
times = length(times))
point[,3] = rep(factor(date,
levels = levels(st$date)),
times = length(times))
point[,4] = factor(times,
levels = levels(temps$time))
point[,5] = factor(monthDay,
levels = levels(temps$MonthDay))
colnames(point) = c(colnames(featuresToUse)[1:4],colnames(featuresToUse)[6])
return(point)
}
pred_point_sum_kernel = function(pointToPred, data) {
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernSum = as.matrix(gaussianKernel(x1 = rep(pointToPred[4], times = nrow(data)),
x2 = data[,4], h = h_time) +
gaussianDistKernel(dist = distances,
h = h_distance) +
gaussianKernel(rep(pointToPred[3],
times = nrow(data)),
x2 = data[,3],
h = h_date))
above = (t(kernSum)%*%temps_data)[1,1]
below = sum(kernSum)
return(above/below)
}
pred_point_prod_kernel = function(pointToPred, data) {
temps_data = as.matrix(data[,5])
distances = apply(data[,1:2], 1, function(dataCoords) {
return(distHaversine(dataCoords, pointToPred[1:2]))
})
kernProd = as.matrix(gaussianKernel(x1 = rep(pointToPred[4], times = nrow(data)),
x2 = data[,4],
h = h_time) *
gaussianDistKernel(dist = distances,
h = h_distance) *
gaussianKernel(rep(pointToPred[3], times = nrow(data)),
x2 = data[,3],
h = h_date))
above = (t(kernProd)%*%temps_data)[1,1]
below = sum(kernProd)
return(above/below)
}
norrkopingTimes = get_points(stationName = "Norrköping",
date = date,
times = times,
monthDay = monthDay)
LinkopingTimes = get_points(stationName = "Linköping",
date = date,
times = times,
monthDay = monthDay)
# Calculate temp
tempsSum = as.numeric()
tempsProd = as.numeric()
count = 0
for (i in 1:nrow(norrkopingTimes)) {
tempsSum[i] = pred_point_sum_kernel(norrkopingTimes[i,], data = featuresToUse)
tempsProd[i] = pred_point_prod_kernel(norrkopingTimes[i,], data = featuresToUse)
count = count + 1
print(count)
}
norrkopingTimes = get_points(stationName = "Norrköping",
date = date,
times = times,
monthDay = monthDay)
LinkopingTimes = get_points(stationName = "Linköping",
date = date,
times = times,
monthDay = monthDay)
# Calculate temp
tempsSum = as.numeric()
tempsProd = as.numeric()
for (i in 1:nrow(norrkopingTimes)) {
tempsSum[i] = pred_point_sum_kernel(norrkopingTimes[i,], data = featuresToUse)
tempsProd[i] = pred_point_prod_kernel(norrkopingTimes[i,], data = featuresToUse)
print(count)
}
norrkopingTimes = get_points(stationName = "Norrköping",
date = date,
times = times,
monthDay = monthDay)
LinkopingTimes = get_points(stationName = "Linköping",
date = date,
times = times,
monthDay = monthDay)
# Calculate temp
tempsSum = as.numeric()
tempsProd = as.numeric()
for (i in 1:nrow(norrkopingTimes)) {
tempsSum[i] = pred_point_sum_kernel(norrkopingTimes[i,], data = featuresToUse)
tempsProd[i] = pred_point_prod_kernel(norrkopingTimes[i,], data = featuresToUse)
}
# Plot
plot(tempsSum, type="o", ylim = c(min(tempsSum,tempsProd), max(tempsSum,tempsProd)), col = "red", lwd = 3, xlab = "Time", ylab = "Temperature")
lines(tempsProd, type = "o", col = "blue", lwd = 3)
axis(1, at=1:11, labels=times)
# Reuse function created in lab 1
MSE = function(y, y_hat) {
n = length(y)
return((1/n)*sum((y - y_hat)^2))
}
#install.packages("neuralnet")
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(50, min = -1, max = 1)
thr = as.numeric()
MSEsValidation = as.numeric()
for (i in 1:10) {
thr[i] = i/1000
nn <- neuralnet(Sin ~ Var, data = tr, threshold = thr[i], startweights = winit, hidden = 10)
# Use validation set here to get error
yValidation = compute(nn, va$Var)$net.result
MSEsValidation[i] = MSE(y = va$Sin, y_hat = yValidation[,1])
#predict(nn, data = va$Var)
plot(prediction(nn)$rep1)
}
plot(MSEsValidation, type = "l")
# Choose the threshold giving the least amount of error.
bestThr = thr[which.min(MSEsValidation)]
# Plot the best one
plot(nn <- neuralnet(Sin ~ Var, data = tr, threshold = bestThr, startweights = winit, hidden = 10))
# Plot of the predictions (black dots) and the data (red dots)
plot(prediction(nn)$rep1)
points(trva, col = "red")
# Reuse function created in lab 1
MSE = function(y, y_hat) {
n = length(y)
return((1/n)*sum((y - y_hat)^2))
}
#install.packages("neuralnet")
library(neuralnet)
set.seed(1234567890)
Var <- runif(50, 0, 10)
trva <- data.frame(Var, Sin=sin(Var))
tr <- trva[1:25,] # Training
va <- trva[26:50,] # Validation
# Random initialization of the weights in the interval [-1, 1]
winit <- runif(50, min = -1, max = 1)
thr = as.numeric()
MSEsValidation = as.numeric()
for (i in 1:10) {
thr[i] = i/1000
nn <- neuralnet(Sin ~ Var, data = tr, threshold = thr[i], startweights = winit, hidden = 10)
# Use validation set here to get error
yValidation = compute(nn, va$Var)$net.result
MSEsValidation[i] = MSE(y = va$Sin, y_hat = yValidation[,1])
#predict(nn, data = va$Var)
#plot(prediction(nn)$rep1)
}
plot(MSEsValidation, type = "l")
# Choose the threshold giving the least amount of error.
bestThr = thr[which.min(MSEsValidation)]
# Plot the best one
plot(nn <- neuralnet(Sin ~ Var, data = tr, threshold = bestThr, startweights = winit, hidden = 10))
# Plot of the predictions (black dots) and the data (red dots)
plot(prediction(nn)$rep1)
points(trva, col = "red")
tanh
